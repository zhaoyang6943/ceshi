1. pytest 安装
    1.1 pip install -U pytest  # 默认加上-U，更新最新
    1.2 进入setting-Project,点击加号，添加模块进行下载

2. PyCharm 配置运行pytest测试
    命令行执行：
    界面执行：

3. 测试用例命名规范
    文件要在test_开头，或者_test结尾
    类要以Test开头，方法要以test_开头
    测试类不可以包含__init__()方法

4. git 和 github ，gitee（国内，github是国外的，网络不是很好），gitlab（公司内部使用）
    4.1 git是代码管理工具，需要安装到本地，类似svn；
        是一个代码的管理工具，它可以将你的所有的目录都管理起来，包括文件的变更，实现版本号的管理；
        Pycharm里面也提供了一个界面化的方式来关联Pycharm中的项目同步到GitHub中。
        命令大全：https://ceshiren.com/t/topic/7405

    4.2 github 是一个网站，工程师之间交流，也可以管理自己的代码

    本地代码如何提交远程仓库？
    答：1. 先将代码提交到本地仓库，（git add； git commit）
       2. 然后推送到远程仓库。


5. pytest的命令行参数

    常用参数：
    pytest --collect-only 只收集用例，看到收集的顺序，意味着我知道用例执行的顺序
    pytest -k “add ” 匹配所有名称中包含add的用例（‘add or div’ ‘TestClass’）
    pytest -m mark标签名 -vs   标记,-v详细记录用例执行结果  -s 打印有打印的地方
    pytest --junitxml=./result.xml       生成执行结果文件,后面有用，xml格式，可以后面自己画。
    pytest --setup-show 回溯fixture的执行过程（下节课讲解）
    更多的用法使用pytest —help查看帮助文档（建议一一尝试）
    pytest --lf 只运行上次失败的用例
    pytest --ff 先运行上次失败的用例


6. 界面化，pytest运行配置
    进入setting-筛选“pytest”-Tools，选择Testing-Default test runner ，选择pytest
    如果没有安装pytest，会有个fix，安装就行
    配置成功后，执行py文件中的测试用例时，执行结果就会呈现树形图结果展示出来

7. 不同级别的setup,teardown
    类：setup,teardown  作用：运行在调用方法的前后（在类中）
    方法：setup_function/teardown_function  函数用例生效（不在类中）
    类级：setup_class/teardown_class  作用：只在类中前后运行一次（在类中使用）